{
  "address": "0x8566E2f222A6e60A4F70d06Afc5DAB3e8F5E9969",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateNonStableTokenFees",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "baseFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "variableFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidityFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct FeeManager.Fees",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateStablecoinFees",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "baseFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "variableFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidityFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct FeeManager.Fees",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "feeThresholds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getStablecoinFeeRates",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "baseFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "variableRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidityRate",
              "type": "uint256"
            }
          ],
          "internalType": "struct FeeManager.FeeRates",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonStableTokenFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "baseFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "variableRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidityRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "removeFeeTier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stablecoinFeeTiers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "baseFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "variableRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidityRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "baseFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "variableRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidityRate",
              "type": "uint256"
            }
          ],
          "internalType": "struct FeeManager.FeeRates",
          "name": "rates",
          "type": "tuple"
        }
      ],
      "name": "updateFeeTier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "baseFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "variableRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidityRate",
              "type": "uint256"
            }
          ],
          "internalType": "struct FeeManager.FeeRates",
          "name": "rates",
          "type": "tuple"
        }
      ],
      "name": "updateNonStableTokenFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf3ee60d17e4f9127da1c7892277734b0aa3dbaa83a83d46ea48bb74651075f05",
  "receipt": {
    "to": "0x0000000000000000000000000000000000000000",
    "from": "0x49b30E1e0CaecF2D573d40AEFbb7f42Af2786b4a",
    "contractAddress": "0x8566E2f222A6e60A4F70d06Afc5DAB3e8F5E9969",
    "transactionIndex": 0,
    "gasUsed": "1350829",
    "logsBloom": "0x
    "blockHash": "0x07c5bc0c8ed03cdc37eb00864012be9aa0c6d0e51088b85e84989cdb866f6a51",
    "transactionHash": "0xf3ee60d17e4f9127da1c7892277734b0aa3dbaa83a83d46ea48bb74651075f05",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4542863,
        "transactionHash": "0xf3ee60d17e4f9127da1c7892277734b0aa3dbaa83a83d46ea48bb74651075f05",
        "address": "0x8566E2f222A6e60A4F70d06Afc5DAB3e8F5E9969",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000049b30e1e0caecf2d573d40aefbb7f42af2786b4a",
          "0x00000000000000000000000049b30e1e0caecf2d573d40aefbb7f42af2786b4a"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x07c5bc0c8ed03cdc37eb00864012be9aa0c6d0e51088b85e84989cdb866f6a51"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 4542863,
        "transactionHash": "0xf3ee60d17e4f9127da1c7892277734b0aa3dbaa83a83d46ea48bb74651075f05",
        "address": "0x8566E2f222A6e60A4F70d06Afc5DAB3e8F5E9969",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
          "0x00000000000000000000000049b30e1e0caecf2d573d40aefbb7f42af2786b4a",
          "0x00000000000000000000000049b30e1e0caecf2d573d40aefbb7f42af2786b4a"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x07c5bc0c8ed03cdc37eb00864012be9aa0c6d0e51088b85e84989cdb866f6a51"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 4542863,
        "transactionHash": "0xf3ee60d17e4f9127da1c7892277734b0aa3dbaa83a83d46ea48bb74651075f05",
        "address": "0x8566E2f222A6e60A4F70d06Afc5DAB3e8F5E9969",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x6c0757dc3e6b28b2580c03fd9e96c274acf4f99d91fbec9b418fa1d70604ff1c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x07c5bc0c8ed03cdc37eb00864012be9aa0c6d0e51088b85e84989cdb866f6a51"
      }
    ],
    "blockNumber": 4542863,
    "cumulativeGasUsed": "1350829",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6fe44dfe6a0be0adb903fc3992d54f94",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateNonStableTokenFees\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"baseFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFee\",\"type\":\"uint256\"}],\"internalType\":\"struct FeeManager.Fees\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateStablecoinFees\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"baseFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFee\",\"type\":\"uint256\"}],\"internalType\":\"struct FeeManager.Fees\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feeThresholds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getStablecoinFeeRates\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"baseFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityRate\",\"type\":\"uint256\"}],\"internalType\":\"struct FeeManager.FeeRates\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonStableTokenFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"removeFeeTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stablecoinFeeTiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"baseFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityRate\",\"type\":\"uint256\"}],\"internalType\":\"struct FeeManager.FeeRates\",\"name\":\"rates\",\"type\":\"tuple\"}],\"name\":\"updateFeeTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"baseFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityRate\",\"type\":\"uint256\"}],\"internalType\":\"struct FeeManager.FeeRates\",\"name\":\"rates\",\"type\":\"tuple\"}],\"name\":\"updateNonStableTokenFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/evm/FeeManager.sol\":\"FeeManager\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xc1c2a7f1563b77050dc6d507db9f4ada5d042c1f6a9ddbffdc49c77cdc0a1606\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/evm/FeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract FeeManager is AccessControl {\\n    struct FeeRates {\\n        uint256 baseFee; // Fixed fee in token decimals\\n        uint256 variableRate; // Variable rate in basis points (1% = 100 bps)\\n        uint256 liquidityRate; // Liquidity rate in basis points (1% = 100 bps)\\n    }\\n\\n    struct Fees {\\n        uint256 baseFee;\\n        uint256 variableFee;\\n        uint256 liquidityFee;\\n        uint256 totalFee;\\n    }\\n\\n    // Mapping for stablecoin fee tiers\\n    mapping(uint256 => FeeRates) public stablecoinFeeTiers;\\n\\n    // Array to store thresholds for stablecoin tiers (sorted order)\\n    uint256[] public feeThresholds;\\n\\n    // Non-stable token fees\\n    FeeRates public nonStableTokenFees;\\n\\n    // Roles\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant FEE_MANAGER_ROLE = keccak256(\\\"FEE_MANAGER_ROLE\\\");\\n\\n    constructor() {\\n        // Grant the deployer the admin role\\n        _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _grantRole(ADMIN_ROLE, _msgSender());\\n        _setRoleAdmin(FEE_MANAGER_ROLE, ADMIN_ROLE);\\n\\n        // Initialize fee thresholds (must be in ascending order)\\n        feeThresholds = [1000, 10000, 100000, 1000000, type(uint256).max];\\n\\n        // Initialize stablecoin fee tiers\\n        stablecoinFeeTiers[1000] = FeeRates(1 * 10**6, 50, 50); // <=1000: $1 + 0.5% + 0.5%\\n        stablecoinFeeTiers[10000] = FeeRates(5 * 10**6, 50, 40); // <=10,000: $5 + 0.5% + 0.4%\\n        stablecoinFeeTiers[100000] = FeeRates(50 * 10**6, 40, 40); // <=100,000: $50 + 0.4% + 0.4%\\n        stablecoinFeeTiers[1000000] = FeeRates(100 * 10**6, 35, 30); // <=1,000,000: $100 + 0.35% + 0.3%\\n        stablecoinFeeTiers[type(uint256).max] = FeeRates(500 * 10**6, 30, 20); // >1,000,000: $500 + 0.3% + 0.2%\\n\\n        // Initialize non-stable token fees\\n        nonStableTokenFees = FeeRates(0, 100, 50); // No base fee + 1% + 0.5%\\n    }\\n\\n    // Calculate fees for stablecoins\\n    function calculateStablecoinFees(uint256 amount) public view returns (Fees memory) {\\n        FeeRates memory rates = getStablecoinFeeRates(amount);\\n        return calculateFees(amount, rates);\\n    }\\n\\n    // Calculate fees for non-stable tokens\\n    function calculateNonStableTokenFees(uint256 amount) public view returns (Fees memory) {\\n        return calculateFees(amount, nonStableTokenFees);\\n    }\\n\\n    // Internal function to calculate fees\\n    function calculateFees(uint256 amount, FeeRates memory rates) internal pure returns (Fees memory) {\\n        uint256 baseFee = rates.baseFee;\\n        uint256 variableFee = (amount * rates.variableRate) / 10000; // Variable Fee = amount * rate\\n        uint256 liquidityFee = (amount * rates.liquidityRate) / 10000; // Liquidity Fee = amount * rate\\n        uint256 totalFee = baseFee + variableFee + liquidityFee;\\n\\n        return Fees(baseFee, variableFee, liquidityFee, totalFee);\\n    }\\n\\n    // Fetch stablecoin fee rates based on amount\\n    function getStablecoinFeeRates(uint256 amount) public view returns (FeeRates memory) {\\n        for (uint256 i = 0; i < feeThresholds.length; i++) {\\n            if (amount <= feeThresholds[i]) {\\n                return stablecoinFeeTiers[feeThresholds[i]];\\n            }\\n        }\\n\\n        // Default case, should never reach here\\n        revert(\\\"Fee rates not found for the given amount\\\");\\n    }\\n\\n    // Update or add a fee tier for stablecoins (requires FEE_MANAGER_ROLE)\\n    function updateFeeTier(uint256 threshold, FeeRates memory rates) external onlyRole(FEE_MANAGER_ROLE) {\\n        require(threshold > 0, \\\"Threshold must be greater than zero\\\");\\n        stablecoinFeeTiers[threshold] = rates;\\n\\n        // Add to thresholds if it doesn't exist\\n        if (!_thresholdExists(threshold)) {\\n            feeThresholds.push(threshold);\\n            _sortThresholds();\\n        }\\n    }\\n\\n    // Remove a fee tier (requires FEE_MANAGER_ROLE)\\n    function removeFeeTier(uint256 threshold) external onlyRole(FEE_MANAGER_ROLE) {\\n        require(_thresholdExists(threshold), \\\"Threshold does not exist\\\");\\n        delete stablecoinFeeTiers[threshold];\\n\\n        // Remove from thresholds\\n        for (uint256 i = 0; i < feeThresholds.length; i++) {\\n            if (feeThresholds[i] == threshold) {\\n                feeThresholds[i] = feeThresholds[feeThresholds.length - 1];\\n                feeThresholds.pop();\\n                break;\\n            }\\n        }\\n\\n        _sortThresholds();\\n    }\\n\\n    // Update non-stable token fees (requires FEE_MANAGER_ROLE)\\n    function updateNonStableTokenFees(FeeRates memory rates) external onlyRole(FEE_MANAGER_ROLE) {\\n        nonStableTokenFees = rates;\\n    }\\n\\n    // Check if a threshold already exists\\n    function _thresholdExists(uint256 threshold) internal view returns (bool) {\\n        for (uint256 i = 0; i < feeThresholds.length; i++) {\\n            if (feeThresholds[i] == threshold) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    // Sort thresholds in ascending order\\n    function _sortThresholds() internal {\\n        for (uint256 i = 0; i < feeThresholds.length; i++) {\\n            for (uint256 j = i + 1; j < feeThresholds.length; j++) {\\n                if (feeThresholds[i] > feeThresholds[j]) {\\n                    uint256 temp = feeThresholds[i];\\n                    feeThresholds[i] = feeThresholds[j];\\n                    feeThresholds[j] = temp;\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x011abb71bbec65a73fa8dc70c06c3023943ba1693a46b2085a2b0c398702ccbc\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561000f575f80fd5b5060043610610111575f3560e01c80636570721e1161009e57806390293d341161006e57806390293d34146102de57806391d14854146102f1578063a217fddf14610304578063d547741f1461030b578063e1a4444b1461031e575f80fd5b80636570721e1461023157806369c5b5e61461025e57806375b238fc146102715780638288018014610298575f80fd5b80632f2ff15d116100e45780632f2ff15d146101b657806336568abe146101cb57806342b53e5f146101de5780635c7b043d146101f1578063620591631461021e575f80fd5b806301ffc9a71461011557806305db2f411461013d578063248a9ca31461015f5780632af8ba4814610181575b5f80fd5b610128610123366004610b4a565b610331565b60405190151581526020015b60405180910390f35b6101515f80516020610d0583398151915281565b604051908152602001610134565b61015161016d366004610b71565b5f9081526020819052604090206001015490565b61019461018f366004610b71565b610367565b6040805182518152602080840151908201529181015190820152606001610134565b6101c96101c4366004610b88565b610479565b005b6101c96101d9366004610b88565b6104a3565b6101c96101ec366004610b71565b6104db565b60035460045460055461020392919083565b60408051938452602084019290925290820152606001610134565b6101c961022c366004610c27565b610617565b61020361023f366004610b71565b600160208190525f918252604090912080549181015460029091015483565b61015161026c366004610b71565b6106fc565b6101517fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b6102ab6102a6366004610b71565b61071b565b60405161013491908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b6101c96102ec366004610c52565b61075f565b6101286102ff366004610b88565b61078d565b6101515f81565b6101c9610319366004610b88565b6107b5565b6102ab61032c366004610b71565b6107d9565b5f6001600160e01b03198216637965db0b60e01b148061036157506301ffc9a760e01b6001600160e01b03198316145b92915050565b61038860405180606001604052805f81526020015f81526020015f81525090565b5f5b60025481101561041a57600281815481106103a7576103a7610c6c565b905f5260205f20015483116104125760015f600283815481106103cc576103cc610c6c565b905f5260205f20015481526020019081526020015f206040518060600160405290815f820154815260200160018201548152602001600282015481525050915050919050565b60010161038a565b5060405162461bcd60e51b815260206004820152602860248201527f466565207261746573206e6f7420666f756e6420666f722074686520676976656044820152671b88185b5bdd5b9d60c21b60648201526084015b60405180910390fd5b5f828152602081905260409020600101546104938161082c565b61049d8383610839565b50505050565b6001600160a01b03811633146104cc5760405163334bd91960e11b815260040160405180910390fd5b6104d682826108c8565b505050565b5f80516020610d058339815191526104f28161082c565b6104fb82610931565b6105475760405162461bcd60e51b815260206004820152601860248201527f5468726573686f6c6420646f6573206e6f7420657869737400000000000000006044820152606401610470565b5f82815260016020819052604082208281559081018290556002018190555b60025481101561060a57826002828154811061058457610584610c6c565b905f5260205f2001540361060257600280546105a290600190610c94565b815481106105b2576105b2610c6c565b905f5260205f200154600282815481106105ce576105ce610c6c565b5f9182526020909120015560028054806105ea576105ea610ca7565b600190038181905f5260205f20015f9055905561060a565b600101610566565b50610613610979565b5050565b5f80516020610d0583398151915261062e8161082c565b5f83116106895760405162461bcd60e51b815260206004820152602360248201527f5468726573686f6c64206d7573742062652067726561746572207468616e207a60448201526265726f60e81b6064820152608401610470565b5f83815260016020818152604092839020855181559085015191810191909155908301516002909101556106bc83610931565b6104d657600280546001810182555f919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace018390556104d6610979565b6002818154811061070b575f80fd5b5f91825260209091200154905081565b61074260405180608001604052805f81526020015f81526020015f81526020015f81525090565b5f61074c83610367565b90506107588382610a68565b9392505050565b5f80516020610d058339815191526107768161082c565b508051600355602081015160045560400151600555565b5f918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b5f828152602081905260409020600101546107cf8161082c565b61049d83836108c8565b61080060405180608001604052805f81526020015f81526020015f81526020015f81525090565b604080516060810182526003548152600454602082015260055491810191909152610361908390610a68565b6108368133610b11565b50565b5f610844838361078d565b6108c1575f838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556108793390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4506001610361565b505f610361565b5f6108d3838361078d565b156108c1575f838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4506001610361565b5f805b60025481101561097157826002828154811061095257610952610c6c565b905f5260205f200154036109695750600192915050565b600101610934565b505f92915050565b5f5b600254811015610836575f610991826001610cbb565b90505b600254811015610a5f57600281815481106109b1576109b1610c6c565b905f5260205f200154600283815481106109cd576109cd610c6c565b905f5260205f2001541115610a57575f600283815481106109f0576109f0610c6c565b905f5260205f200154905060028281548110610a0e57610a0e610c6c565b905f5260205f20015460028481548110610a2a57610a2a610c6c565b905f5260205f2001819055508060028381548110610a4a57610a4a610c6c565b5f91825260209091200155505b600101610994565b5060010161097b565b610a8f60405180608001604052805f81526020015f81526020015f81526020015f81525090565b815160208301515f9061271090610aa69087610cce565b610ab09190610ce5565b90505f612710856040015187610ac69190610cce565b610ad09190610ce5565b90505f81610ade8486610cbb565b610ae89190610cbb565b604080516080810182529586526020860194909452928401919091525060608201529392505050565b610b1b828261078d565b6106135760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401610470565b5f60208284031215610b5a575f80fd5b81356001600160e01b031981168114610758575f80fd5b5f60208284031215610b81575f80fd5b5035919050565b5f8060408385031215610b99575f80fd5b8235915060208301356001600160a01b0381168114610bb6575f80fd5b809150509250929050565b5f60608284031215610bd1575f80fd5b6040516060810181811067ffffffffffffffff82111715610c0057634e487b7160e01b5f52604160045260245ffd5b80604052508091508235815260208301356020820152604083013560408201525092915050565b5f8060808385031215610c38575f80fd5b82359150610c498460208501610bc1565b90509250929050565b5f60608284031215610c62575f80fd5b6107588383610bc1565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b8181038181111561036157610361610c80565b634e487b7160e01b5f52603160045260245ffd5b8082018082111561036157610361610c80565b808202811582820484141761036157610361610c80565b5f82610cff57634e487b7160e01b5f52601260045260245ffd5b50049056fe6c0757dc3e6b28b2580c03fd9e96c274acf4f99d91fbec9b418fa1d70604ff1ca26469706673582212208a6fc0d0b95597c17ddfbc618a93841c362c1ca91078d7205ed20cee77d1910b64736f6c63430008180033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ]
    },
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4554,
        "contract": "contracts/evm/FeeManager.sol:FeeManager",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)4549_storage)"
      },
      {
        "astId": 6684,
        "contract": "contracts/evm/FeeManager.sol:FeeManager",
        "label": "stablecoinFeeTiers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(FeeRates)6670_storage)"
      },
      {
        "astId": 6687,
        "contract": "contracts/evm/FeeManager.sol:FeeManager",
        "label": "feeThresholds",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 6690,
        "contract": "contracts/evm/FeeManager.sol:FeeManager",
        "label": "nonStableTokenFees",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(FeeRates)6670_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)4549_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)4549_storage"
      },
      "t_mapping(t_uint256,t_struct(FeeRates)6670_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct FeeManager.FeeRates)",
        "numberOfBytes": "32",
        "value": "t_struct(FeeRates)6670_storage"
      },
      "t_struct(FeeRates)6670_storage": {
        "encoding": "inplace",
        "label": "struct FeeManager.FeeRates",
        "members": [
          {
            "astId": 6665,
            "contract": "contracts/evm/FeeManager.sol:FeeManager",
            "label": "baseFee",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6667,
            "contract": "contracts/evm/FeeManager.sol:FeeManager",
            "label": "variableRate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6669,
            "contract": "contracts/evm/FeeManager.sol:FeeManager",
            "label": "liquidityRate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoleData)4549_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 4546,
            "contract": "contracts/evm/FeeManager.sol:FeeManager",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 4548,
            "contract": "contracts/evm/FeeManager.sol:FeeManager",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}